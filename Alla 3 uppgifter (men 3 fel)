import { lg_new, ListGraph } from './graphs'
import{ append, is_null, list, List, type Pair} from './list'
import{length} from './list_prelude'
import{lg_kosaraju} from './lecture10b'

type Permutation = Array<number>;

/**
 * Generates a random permutation of numbers from 0 to `length - 1` using Durstenfeld's improved version of the Fisher-Yates shuffle
 * 
 * @param length the length of the permutation
 * @returns the random permutation as an array of numbers, type Permutation
 */
function random_permutation(length: number): Permutation {
    let permutation= Array.from({length}, (_, i) => i);
    for (let i = length - 1; i > 0; i--) {
        let j = Math.floor(Math.random() * (i + 1));
        [permutation[i], permutation[j]] = [permutation[j], permutation[i]];
    }
    return permutation;
}

/**
 * Permutes the elements of an array according to a given permutation
 * 
 * @param xs the list to be permuted
 * @returns the permuted list
 */
function lg_permute_list<T>(xs: List<T>): List<T> {

    const permutation: Permutation = random_permutation(list.length);
    let new_list: List<T> = xs;
    for (let i = 0; i <= length(xs); i++){
        if (!is_null(new_list) && !is_null(xs)){
            new_list[permutation[i]] = xs[i];
      
        }
    
    }
    return new_list;
}

/**
 * Permutes the adjacency lists of a graph
 * 
 * @param lg the graph to be permuted
 * @returns the permuted graph
 */
function lg_permute_nodeLists(graph: ListGraph): ListGraph {
    let new_graph: ListGraph = lg_new(graph.size);
    for (let i = 0; i < graph.size; i++) {

        const permutation: Permutation = random_permutation(graph.size);
        if (!is_null(graph) && !is_null(new_graph)){
            new_graph[permutation[i]] = graph[i];
        }
    }
    return new_graph;
  
}

  
/**
 * Permutes the adjacency lists of a graph
 * 
 * @param lg the graph to be permuted and restarted
 * @returns the randomly restarted adjacency lists in a list
 */
function random_kosaraju(lg: ListGraph): List<List<number>> {
    const randomStartOrder: Permutation = random_permutation(lg.size);
    const new_graph = lg_permute_nodeLists(lg);
    let new_list: List<number> = list();
    
    for (let i = 0; i <= randomStartOrder.length; i++){
        new_list = append(new_list, list(randomStartOrder[i]));
    }
    return lg_kosaraju(new_graph, new_list);
    
}

type Stream<T> = Pair<T, () => Stream<T>> | null;

/**
 * Rewrites the second pass of the Kosaraju algorithm to return a stream of SCCs
 * 
 * @param lg the graph on which the algorithm is being executed
 * @returns a stream of SCCs, type Stream<List<number>>
 */
function stream_kosaraju(lg: ListGraph): Stream<List<number>> {
    let scc: List<List<number>> = lg_kosaraju(lg);
    if (!scc) return null;
    let count: number = 0;
    return {
        head: scc[count],
        tail: () => {
            count++;
            if (count === scc.length) return null;
            else return stream_kosaraju(lg);
        }
    };
}

/**
 * Permutes the graph and use the stream version of Kosaraju to return a stream of SCCs
 * 
 * @param lg the graph to be permuted and restarted
 * @returns a stream of SCCs, type Stream<List<number>>
 */
function stream_random_kosaraju(lg: ListGraph): Stream<List<number>> {
    let new_graph = lg_permute_nodeLists(lg);
    let new_list: List<number> = list();
    let permutation: Permutation = random_permutation(lg.size);

    for (let i = 0; i < permutation.length; i++) {
        new_list = append(new_list, list(permutation[i]));
    }
    return stream_kosaraju(new_graph, new_list);
}

test('it returns an array of the correct length', () => {
    const length = 10;
    const permutation = random_permutation(length);
    expect(permutation).toHaveLength(length);
});

test('it returns a valid permutation', () => {
    const length = 10;
    const permutation = random_permutation(length);
    expect(permutation).toHaveLength(length);
    expect([...permutation].sort()).toEqual(Array.from({length}, (_, i) => i));
});

test('it returns the correct SCCs', () => {
    const lg: ListGraph = {
        adj: [list(1, 2),list(3,4), list(0,1)],
        size: 3
    };
       
    const result = random_kosaraju(lg);
    expect(result).toContainEqual(lg.adj);
});
